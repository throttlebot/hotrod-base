{
  "_args": [
    [
      {
        "raw": "@quilt/haproxy@file:./../haproxy/",
        "scope": "@quilt",
        "escapedName": "@quilt%2fhaproxy",
        "name": "@quilt/haproxy",
        "rawSpec": "file:./../haproxy/",
        "spec": "/home/ubuntu/gocode/src/github.com/quilt/hotrod-base/haproxy",
        "type": "directory"
      },
      "/home/ubuntu/gocode/src/github.com/quilt/hotrod-base/quilt"
    ]
  ],
  "_from": "../haproxy",
  "_id": "@quilt/haproxy@0.3.0",
  "_inCache": true,
  "_location": "/@quilt/haproxy",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@quilt/haproxy@file:./../haproxy/",
    "scope": "@quilt",
    "escapedName": "@quilt%2fhaproxy",
    "name": "@quilt/haproxy",
    "rawSpec": "file:./../haproxy/",
    "spec": "/home/ubuntu/gocode/src/github.com/quilt/hotrod-base/haproxy",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:../haproxy",
  "_shasum": "eb7723d8b447dcccab15e01605e6228fcd11c0d7",
  "_shrinkwrap": null,
  "_spec": "@quilt/haproxy@file:./../haproxy/",
  "_where": "/home/ubuntu/gocode/src/github.com/quilt/hotrod-base/quilt",
  "dependencies": {
    "@quilt/quilt": "file:../../quilt",
    "mustache": "^2.3.0"
  },
  "description": "This repository implements a HAProxy blueprint for Quilt. The module has two different constructors: `simpleLoadBalancer` and `withURLrouting`.",
  "devDependencies": {
    "chai": "^4.1.1",
    "eslint": "^4.3.0",
    "eslint-config-airbnb-base": "^11.3.1",
    "eslint-plugin-import": "^2.7.0",
    "gulp": "^3.9.1",
    "gulp-eslint": "^4.0.0",
    "gulp-if": "^2.0.2",
    "gulp-mocha": "^4.3.1",
    "mocha": "^3.5.0"
  },
  "license": "MIT",
  "main": "./haproxy.js",
  "name": "@quilt/haproxy",
  "optionalDependencies": {},
  "readme": "# HAProxy for Quilt\n\nThis repository implements a HAProxy blueprint for Quilt. The module has two different\nconstructors: `simpleLoadBalancer` and `withURLrouting`.\n\n### simpleLoadBalancer\n`simpleLoadBalancer` creates an HAProxy container that load balances\nover a group of containers, using sticky sessions. It takes the following\narguments:\n\n```javascript\n@param {Container[]} containers The containers whose traffic should be load balanced.\n@param {string} [balance=roundrobin] balance The load balancing algorithm to\n  use. See the HAProxy docs for possible algorithms.\n```\n\nHAProxy will communicate with the containers behind it on port 80.\n\n#### Example\n```javascript\nconst {Container} = require('@quilt/quilt');\nconst haproxy = require('@quilt/haproxy');\n\nconst proxy = haproxy.simpleLoadBalancer(new Container('web', 'nginx').replicate(3)));\n```\nThe `proxy` variable now refers to a HAProxy container that does\nroundrobin load balancing over 3 nginx containers.\n\n### withURLrouting\nThe `withURLrouting` constructor creates an HAProxy container that performs load\nbalanced, URL based routing with sticky sessions. It uses session cookies to implement\nthe sticky sessions.\nVery similar to above, the constructor takes the following arguments:\n\n```javascript\n@param {Object.<string, Container[]>} domainToContainers A map from domain name\nto the containers that should receive traffic for that domain.\n@param {string} [balance=roundrobin] The load balancing algorithm to use.\n  See the HAProxy docs for possible algorithms.\n```\n\nHAProxy will communicate with the services behind it on port 80.\n\n#### Example\n\n```javascript\nconst proxy = haproxy.withURLrouting({\n \t'webA.com': new Container('webA', 'nginx').replicate(3),\n\t'webB.com': new Container('webB', 'nginx').replicate(2),\n});\n```\n\n`proxy` now refers to an HAProxy instance that sits in front of the\nreplicated websites at `webA.com` and `webB.com` respectively. Requests sent to the\nHAProxy IP address will be forwarded to the correct web server as determined by the\n`Host` header in the HTTP request. The proxy will have the following configuration:\n\n```\nglobal\n\ndefaults\n    log     global\n    mode    http\n    timeout connect 5000\n    timeout client 5000\n    timeout server 5000\n\nresolvers dns\n    nameserver gateway 10.0.0.1:53\n\nfrontend http-in\n    bind *:80\n\n    acl webA.com_req hdr(host) -i webA.com\n    use_backend webA.com if webA.com_req\n\n    acl webB.com_req hdr(host) -i webB.com\n    use_backend webB.com if webB.com_req\n\nbackend webA.com\n    balance roundrobin\n    cookie SERVERID insert indirect nocache\n    server webA2.q webA2.q:80 check resolvers dns cookie webA2.q\n    server webA3.q webA3.q:80 check resolvers dns cookie webA3.q\n    server webA4.q webA4.q:80 check resolvers dns cookie webA4.q\n\nbackend webB.com\n    balance roundrobin\n    cookie SERVERID insert indirect nocache\n    server webB2.q webB2.q:80 check resolvers dns cookie webB2.q\n    server webB3.q webB3.q:80 check resolvers dns cookie webB3.q\n```\n\n## Accessing the Proxy\nTo make the proxy accessible from the public internet, simply add the following\nline to your blueprint:\n\n```javascript\nproxy.allowFrom(publicInternet, haproxy.exposedPort);\n```\n\nThis will open port 80 on the proxy instance.\n\n## More\nSee [Quilt](http://quilt.io) for more information.\n",
  "readmeFilename": "README.md",
  "version": "0.3.0"
}
